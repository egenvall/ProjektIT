Requirements and Analysis document for Dimensions project (RAD)


Contents


1. Introduction
1.1 Purpose of application
1.2 General characteristics of application
1.3 Scope of application
1.4 Objectives and success criteria of the project
1.5 Definitions, acronyms and abbreviations
2. Requirements
2.1 Functional requirements
2.2 Non-functional requirements
2.2.1 Usability
2.2.2 Reliability
2.2.3 Performance
2.2.4 Supportability
2.2.5 Implementation
2.2.6 Packaging and installation
2.2.7 Legal
2.3 Application models
2.3.1 Use case model
2.3.2 Use cases priority
2.3.3 Domain model
2.3.4 User interface
        2.4 References


APPENDIX
Use Case diagram
GUI
Domain Model
Use Cases




________________


1. Introduction


1.1 Purpose of application
The proposed application is Dimensions, a classical 2D “runner game” which in its simplest form is about bringing an object through levels consisting of numerous obstacles. The application is diversified by, and gets it name from the change of dimension overview that occurs at certain points in the game. For a better overview of the game, see sketches in references.


1.2 General characteristics of application
The application will be developed for desktop and android with focus on simple mobile controls. It should be easy to understand how to play to make it appealing to as many people as possible. 


The object the player is trying to bring through the levels is moving with a constant speed and the challenge is to avoid obstacles by either jumping, ducking or moving sideways. Example of obstacles could be missing ground, bed of nails and lava. At certain points in the game the dimension overview will change as well and the player has to quickly reorientate to successfully be able to finish the levels. When a new level starts dimension shown will most likely be an XY view, similar to Super Mario and other 2D games. 


1.3 Scope of application
The application will primarily be a single player android game featuring a multiple modes and high scores.


1.4 Objectives and success criteria of the project
The objective is to be able to play a game in more than one dimension with power-ups, 


1.5 Definitions, acronyms and abbreviations
● GUI, graphical user interface.
● Java, platform independent programming language.
● JRE, the Java Run time Environment. Additional software needed to run an Java
application


2. Requirements
2.1 Functional requirements
The player should be able to:
1. Choose game mode
2. Start a new game
1. Jump over obstacles or to platforms
2. Navigate to avoid obstacles
3. Get item-boosts (speed, power etc.)
1. Pause the game
2. See the high scores


2.2 Non-functional requirements
2.2.1 Usability
The usability is essential.  A new user should be able to start a new game and after seeing hints displayed during an intro level, understand how the controls work. Tests will be performed to ensure usability. The language used is English and we have no intentions in providing translations. Primarily because the text is sporadic and controls should be simple enough to understand with a very basic knowledge of English.


2.2.2 Reliability
NA


2.2.3 Performance
The player’s actions should be given a response almost instantly.


2.2.4 Supportability
We are going to support android and desktop devices, but the application should be made in such a way that it is easy to port it to other platforms, for example iOS.


2.2.5 Implementation
To be able to make the application available on multiple platforms we will be using the java library LIBgdx. It supports desktop, web, android and iOS. 



2.2.6 Packaging and installation
2.2.7 Legal
Android is a trademark owned by Google


2.3 Application models
2.3.1 Use case model
See appendix for UML and textual description.
2.3.2 Use cases priority


2.3.3 Domain model
See appendix.
2.3.4 User interface






________________


APPENDIX
Use cases
Normal flow:


Use Case: Jump
Summary: Player jumps to avoid object on the level. Could cause the player to finish the level or die.
Priority: high
Includes: Gravity, Position,Collision
Participators: Player
Normal flow of events:






	User
	System
	1.
	Press screen to jump
	

	2.
	

	Displays jumping player
	3.
	

	Performs actions needed for jumping animation.
	

Alternate flows
Use Case: Collision
Summary: Player collides into an obstacle or platform and dies.
Priority: high
Includes:
Participators: Player
Normal flow of events:


	User
	System
	1
	Runs/Jumps into obstacle
	

	2
	

	Shows death screen
- Play again
- Select level
- Menuish
	

	

	

	

	

	

	









Use Case: Powerup
Summary: Player runs over a powerup thingy
Priority: high
Includes:
Participators: Player
Normal flow of events:


	User
	System
	1.
	Run over (picks up) powerup
	

	2.
	

	Give the user the boost of that certain powerup, play sound?
	

Use Case : Powerup speed




	User
	System
	2.1
	

	Increase speed
	2.2
	

	Play speed-sound
	2.3
	

	Show powerup timer
	

Use Case: Powerup invisibility




	User
	System
	2.4
	

	Render player more transculent
	2.5
	

	Play sound
	2.6
	

	Show powerup timer